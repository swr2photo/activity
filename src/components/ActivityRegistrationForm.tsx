'use client';
import React, { useState, useEffect } from 'react';
import {
  Box,
  Card,
  CardContent,
  TextField,
  Button,
  Typography,
  Grid,
  Alert,
  CircularProgress,
  Stepper,
  Step,
  StepLabel,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  SelectChangeEvent,
  Paper,
  Fade,
  Grow,
  Slide
} from '@mui/material';
import {
  Block as BlockIcon,
  CheckCircle as CheckCircleIcon,
  Error as ErrorIcon,
  Refresh as RefreshIcon,
  Person as PersonIcon,
  LocationOn as LocationIcon,
  AccessTime as AccessTimeIcon,
  School as SchoolIcon,
  Badge as BadgeIcon
} from '@mui/icons-material';
import { collection, addDoc, serverTimestamp, query, where, getDocs, doc, setDoc, onSnapshot } from 'firebase/firestore';
import { db } from '../lib/firebase';
import LocationChecker from './LocationChecker';
import { ActivityRecord, AdminSettings } from '../types';
import { validateStudentId, validateThaiName } from '../utils/validation';

interface Department {
  id: string;
  name: string;
  isActive: boolean;
}

interface ActivityStatus {
  exists: boolean;
  isActive: boolean;
  activityCode: string;
  description?: string;
  userCode?: string; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å recommendationCode ‡πÄ‡∏õ‡πá‡∏ô userCode
}

interface ActivityRegistrationFormProps {
  activityCode: string;
  adminSettings: AdminSettings;
}

const ActivityRegistrationForm: React.FC<ActivityRegistrationFormProps> = ({
  activityCode,
  adminSettings
}) => {
  const [activeStep, setActiveStep] = useState(0);
  const [loading, setLoading] = useState(false);
  const [departmentsLoading, setDepartmentsLoading] = useState(true);
  const [activityStatusLoading, setActivityStatusLoading] = useState(true);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);
  const [departments, setDepartments] = useState<Department[]>([]);
  const [activityStatus, setActivityStatus] = useState<ActivityStatus>({
    exists: false,
    isActive: false,
    activityCode: '',
    userCode: ''
  });

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
  const [forceRefreshEnabled, setForceRefreshEnabled] = useState(false);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [realtimeListener, setRealtimeListener] = useState<(() => void) | null>(null);

  const [formData, setFormData] = useState({
    studentId: '',
    firstName: '',
    lastName: '',
    department: '',
    userCode: '' // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å recommendationCode ‡πÄ‡∏õ‡πá‡∏ô userCode
  });

  const steps = ['‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á', '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'];

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  const defaultDepartments = [
    '‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå',
    '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå',
    '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®',
    '‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à',
    '‡∏®‡∏¥‡∏•‡∏õ‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå',
    '‡∏Ñ‡∏£‡∏∏‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå',
    '‡πÅ‡∏û‡∏ó‡∏¢‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå',
    '‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå',
    '‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå',
    '‡∏ó‡∏±‡∏ô‡∏ï‡πÅ‡∏û‡∏ó‡∏¢‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå',
    '‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå',
    '‡∏ô‡∏¥‡πÄ‡∏ó‡∏®‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå',
    '‡∏ô‡∏¥‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå',
    '‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå',
    '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£'
  ];

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
  const handleForceRefresh = () => {
    console.log('üîÑ Initiating force refresh...');
    setIsRefreshing(true);
    
    // ‡∏õ‡∏¥‡∏î real-time listener ‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
    if (realtimeListener) {
      realtimeListener();
      setRealtimeListener(null);
    }
    
    // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á loading state
    setTimeout(() => {
      window.location.reload();
    }, 1500);
  };

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏≤‡∏Å Firebase ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á real-time listener
  const checkActivityStatus = async () => {
    try {
      setActivityStatusLoading(true);
      console.log('Checking activity status for:', activityCode);
      
      const q = query(
        collection(db, 'activityQRCodes'),
        where('activityCode', '==', activityCode)
      );
      const querySnapshot = await getDocs(q);
      
      if (querySnapshot.empty) {
        console.log('Activity not found in database');
        setActivityStatus({
          exists: false,
          isActive: false,
          activityCode: activityCode,
          userCode: ''
        });
      } else {
        const activityDoc = querySnapshot.docs[0];
        const data = activityDoc.data();
        console.log('Activity found:', data);
        
        setActivityStatus({
          exists: true,
          isActive: data.isActive !== undefined ? data.isActive : true,
          activityCode: data.activityCode,
          description: data.description || '',
          userCode: data.userCode || '' // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å recommendationCode ‡πÄ‡∏õ‡πá‡∏ô userCode
        });

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
        setForceRefreshEnabled(data.forceRefresh === true);

        // ‡∏ï‡∏±‡πâ‡∏á real-time listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        const unsubscribe = onSnapshot(doc(db, 'activityQRCodes', activityDoc.id), (docSnapshot) => {
          if (docSnapshot.exists()) {
            const updatedData = docSnapshot.data();
            console.log('Activity status updated in real-time:', updatedData);
            
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
            setActivityStatus(prev => ({
              ...prev,
              isActive: updatedData.isActive !== undefined ? updatedData.isActive : true,
              description: updatedData.description || '',
              userCode: updatedData.userCode || '' // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å recommendationCode ‡πÄ‡∏õ‡πá‡∏ô userCode
            }));

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á forceRefresh
            const newForceRefresh = updatedData.forceRefresh === true;
            
            if (newForceRefresh && !forceRefreshEnabled) {
              console.log('üîÑ Force refresh enabled from server - initiating refresh...');
              setForceRefreshEnabled(true);
              
              // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
              setTimeout(() => {
                handleForceRefresh();
              }, 2000); // ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
              
            } else if (!newForceRefresh && forceRefreshEnabled) {
              console.log('‚úÖ Force refresh disabled from server');
              setForceRefreshEnabled(false);
            }
          }
        }, (error) => {
          console.error('Real-time listener error:', error);
        });

        // ‡πÄ‡∏Å‡πá‡∏ö unsubscribe function
        setRealtimeListener(() => unsubscribe);
      }
    } catch (error) {
      console.error('Error checking activity status:', error);
      setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏î‡πâ');
      setActivityStatus({
        exists: false,
        isActive: false,
        activityCode: activityCode,
        userCode: ''
      });
    } finally {
      setActivityStatusLoading(false);
    }
  };

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const initializeDepartments = async () => {
    try {
      console.log('Initializing departments in database...');
      
      for (const deptName of defaultDepartments) {
        const deptDoc = doc(db, 'departments', deptName.replace(/\s+/g, '_'));
        await setDoc(deptDoc, {
          name: deptName,
          isActive: true,
          createdAt: serverTimestamp(),
          updatedAt: serverTimestamp()
        }, { merge: true });
      }
      
      console.log('‚úÖ Departments initialized successfully');
    } catch (error) {
      console.error('Error initializing departments:', error);
    }
  };

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤‡∏à‡∏≤‡∏Å Firebase ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
  const fetchDepartments = async () => {
    try {
      setDepartmentsLoading(true);
      const departmentsQuery = query(
        collection(db, 'departments'),
        where('isActive', '==', true)
      );
      const querySnapshot = await getDocs(departmentsQuery);
      
      let departmentsList: Department[] = [];
      querySnapshot.forEach((doc) => {
        departmentsList.push({
          id: doc.id,
          ...doc.data()
        } as Department);
      });

      // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      if (departmentsList.length === 0) {
        console.log('No departments found, initializing default departments...');
        await initializeDepartments();
        
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
        const newQuerySnapshot = await getDocs(departmentsQuery);
        departmentsList = [];
        newQuerySnapshot.forEach((doc) => {
          departmentsList.push({
            id: doc.id,
            ...doc.data()
          } as Department);
        });
      }

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠
      departmentsList.sort((a, b) => a.name.localeCompare(b.name, 'th'));
      setDepartments(departmentsList);
      
    } catch (error) {
      console.error('Error fetching departments:', error);
      setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
      
      // Fallback: ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Firebase ‡πÑ‡∏î‡πâ
      const fallbackDepartments = defaultDepartments.map((name, index) => ({
        id: `fallback-${index}`,
        name,
        isActive: true
      }));
      
      setDepartments(fallbackDepartments);
    } finally {
      setDepartmentsLoading(false);
    }
  };

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠ component mount ‡πÅ‡∏•‡∏∞ cleanup ‡πÄ‡∏°‡∏∑‡πà‡∏≠ unmount
  useEffect(() => {
    const loadInitialData = async () => {
      await Promise.all([
        checkActivityStatus(),
        fetchDepartments()
      ]);
    };
    
    loadInitialData();

    // Cleanup function ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î real-time listener
    return () => {
      if (realtimeListener) {
        console.log('üîå Cleaning up real-time listener');
        realtimeListener();
      }
    };
  }, [activityCode]);

  // useEffect ‡πÅ‡∏¢‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° realtimeListener changes
  useEffect(() => {
    return () => {
      if (realtimeListener) {
        realtimeListener();
      }
    };
  }, [realtimeListener]);

  const handleInputChange = (field: string) => (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà ‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (forceRefreshEnabled) {
      return;
    }

    setFormData({
      ...formData,
      [field]: event.target.value
    });
    setError('');
  };

  const handleSelectChange = (field: string) => (
    event: SelectChangeEvent<string>
  ) => {
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà ‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (forceRefreshEnabled) {
      return;
    }

    setFormData({
      ...formData,
      [field]: event.target.value
    });
    setError('');
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÉ‡∏´‡∏°‡πà
  const validateNewStudentId = (studentId: string): boolean => {
    // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 10 ‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    if (!/^\d{10}$/.test(studentId)) {
      return false;
    }
    
    // ‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 64-69
    const prefix = studentId.substring(0, 2);
    const prefixNum = parseInt(prefix);
    return prefixNum >= 64 && prefixNum <= 69;
  };

  const validateForm = async (): Promise<boolean> => {
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà ‡∏´‡πâ‡∏≤‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    if (forceRefreshEnabled) {
      setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡∏°‡πà');
      return false;
    }

    if (!validateNewStudentId(formData.studentId)) {
      setError('‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 10 ‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 64-69)');
      return false;
    }
    
    if (!validateThaiName(formData.firstName)) {
      setError('‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)');
      return false;
    }
    
    if (!validateThaiName(formData.lastName)) {
      setError('‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)');
      return false;
    }
    
    if (!formData.department) {
      setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤');
      return false;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    if (!formData.userCode) {
      setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
      return false;
    }

    // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
    if (formData.userCode !== activityStatus.userCode) {
      setError('‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
      return false;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ã‡πâ‡∏≥
    try {
      const q = query(
        collection(db, 'activityRecords'),
        where('studentId', '==', formData.studentId),
        where('activityCode', '==', activityCode)
      );
      const querySnapshot = await getDocs(q);
      
      if (!querySnapshot.empty) {
        setError('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß');
        return false;
      }
    } catch (error) {
      console.error('Error checking duplicate:', error);
    }

    return true;
  };

  const handleSubmit = async () => {
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà ‡∏´‡πâ‡∏≤‡∏°‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
    if (forceRefreshEnabled) {
      setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡∏°‡πà');
      return;
    }

    if (!(await validateForm())) return;
    
    setLoading(true);
    setActiveStep(1);
  };

  const handleLocationVerified = async (location: {
    latitude: number;
    longitude: number;
  }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏£‡∏¥‡∏á
    if (forceRefreshEnabled) {
      setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡∏°‡πà');
      setLoading(false);
      setActiveStep(0);
      return;
    }

    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏ type ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á type error
      const activityRecord = {
        studentId: formData.studentId,
        firstName: formData.firstName,
        lastName: formData.lastName,
        department: formData.department,
        activityCode,
        location,
        userCode: formData.userCode // ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
      };

      await addDoc(collection(db, 'activityRecords'), {
        ...activityRecord,
        timestamp: serverTimestamp()
      });

      setActiveStep(2);
      setSuccess(true);
      setLoading(false);
    } catch (error) {
      console.error('Error saving record:', error);
      setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      setLoading(false);
      setActiveStep(0);
    }
  };

  const handleLocationError = (errorMessage: string) => {
    setError(errorMessage);
    setLoading(false);
    setActiveStep(0);
  };

  // ‡πÅ‡∏™‡∏î‡∏á Loading ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
  if (isRefreshing) {
    return (
      <Fade in={true}>
        <Card elevation={8} sx={{ borderRadius: 4 }}>
          <CardContent sx={{ textAlign: 'center', py: 8 }}>
            <RefreshIcon 
              sx={{ 
                fontSize: 80, 
                color: 'primary.main', 
                mb: 3, 
                animation: 'spin 1s linear infinite',
                '@keyframes spin': {
                  '0%': {
                    transform: 'rotate(0deg)',
                  },
                  '100%': {
                    transform: 'rotate(360deg)',
                  },
                }
              }} 
            />
            <Typography variant="h4" sx={{ mt: 2, fontWeight: 600, color: 'primary.main' }}>
              ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà...
            </Typography>
            <Typography variant="body1" color="text.secondary" sx={{ mt: 2 }}>
              ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà
            </Typography>
          </CardContent>
        </Card>
      </Fade>
    );
  }

  // ‡πÅ‡∏™‡∏î‡∏á Loading ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
  if (activityStatusLoading) {
    return (
      <Fade in={true}>
        <Card elevation={8} sx={{ borderRadius: 4 }}>
          <CardContent sx={{ textAlign: 'center', py: 8 }}>
            <CircularProgress size={80} thickness={4} sx={{ mb: 3 }} />
            <Typography variant="h4" sx={{ mt: 2, fontWeight: 600 }}>
              ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°...
            </Typography>
            <Typography variant="body1" color="text.secondary" sx={{ mt: 2 }}>
              ‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°: <strong>{activityCode}</strong>
            </Typography>
          </CardContent>
        </Card>
      </Fade>
    );
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
  if (forceRefreshEnabled) {
    return (
      <Slide direction="up" in={true}>
        <Card elevation={12} sx={{ borderRadius: 4, border: '2px solid', borderColor: 'warning.main' }}>
          <CardContent sx={{ textAlign: 'center', py: 8 }}>
            <RefreshIcon sx={{ fontSize: 100, color: 'warning.main', mb: 3 }} />
            <Typography variant="h3" color="warning.main" gutterBottom fontWeight="bold">
              {isRefreshing ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà...' : '‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà'}
            </Typography>
            <Typography variant="h6" paragraph color="text.secondary">
              {isRefreshing 
                ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà...'
                : '‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö Real-time'
              }
            </Typography>
            
            {!isRefreshing && (
              <>
                <Paper sx={{ 
                  p: 4, 
                  bgcolor: 'warning.50', 
                  border: '2px solid', 
                  borderColor: 'warning.200', 
                  mb: 4,
                  borderRadius: 3
                }}>
                  <Typography variant="h6" color="warning.main" sx={{ mb: 2, fontWeight: 600 }}>
                    üîÑ ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏à‡∏≤‡∏Å Server ‡πÅ‡∏•‡πâ‡∏ß
                  </Typography>
                  <Typography variant="body1" color="text.secondary" sx={{ mb: 1 }}>
                    ‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                  </Typography>
                  <Typography variant="body1" color="text.secondary" sx={{ mb: 1 }}>
                    ‚Ä¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ
                  </Typography>
                  <Typography variant="body1" color="text.secondary">
                    ‚Ä¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ô 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...
                  </Typography>
                </Paper>
                
                <Box sx={{ display: 'flex', justifyContent: 'center', gap: 2 }}>
                  <Button
                    variant="contained"
                    size="large"
                    onClick={handleForceRefresh}
                    disabled={isRefreshing}
                    startIcon={<RefreshIcon />}
                    sx={{ px: 4, py: 1.5, borderRadius: 3 }}
                  >
                    ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                  </Button>
                  
                  <Button
                    variant="outlined"
                    size="large"
                    onClick={() => window.close()}
                    sx={{ px: 4, py: 1.5, borderRadius: 3 }}
                  >
                    ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
                  </Button>
                </Box>
              </>
            )}

            {isRefreshing && (
              <Box sx={{ mt: 4 }}>
                <CircularProgress size={60} thickness={4} />
                <Typography variant="body1" color="text.secondary" sx={{ mt: 3 }}>
                  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå...
                </Typography>
              </Box>
            )}
          </CardContent>
        </Card>
      </Slide>
    );
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
  if (!activityStatus.exists) {
    return (
      <Grow in={true}>
        <Card elevation={8} sx={{ borderRadius: 4, border: '2px solid', borderColor: 'error.main' }}>
          <CardContent sx={{ textAlign: 'center', py: 8 }}>
            <ErrorIcon sx={{ fontSize: 100, color: 'error.main', mb: 3 }} />
            <Typography variant="h3" color="error.main" gutterBottom fontWeight="bold">
              ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ
            </Typography>
            <Typography variant="h6" paragraph color="text.secondary">
              ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™ "<strong>{activityCode}</strong>" ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
            </Typography>
            <Paper sx={{ 
              p: 3, 
              bgcolor: 'grey.100', 
              mb: 4,
              borderRadius: 3
            }}>
              <Typography variant="body1" color="text.secondary">
                ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
              </Typography>
            </Paper>
            <Button
              variant="outlined"
              size="large"
              onClick={() => window.close()}
              sx={{ px: 4, py: 1.5, borderRadius: 3 }}
            >
              ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
            </Button>
          </CardContent>
        </Card>
      </Grow>
    );
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
  if (!activityStatus.isActive) {
    return (
      <Grow in={true}>
        <Card elevation={8} sx={{ borderRadius: 4, border: '2px solid', borderColor: 'warning.main' }}>
          <CardContent sx={{ textAlign: 'center', py: 8 }}>
            <BlockIcon sx={{ fontSize: 100, color: 'warning.main', mb: 3 }} />
            <Typography variant="h3" color="warning.main" gutterBottom fontWeight="bold">
              ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            </Typography>
            <Typography variant="h6" paragraph color="text.secondary">
              ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° "<strong>{activityStatus.activityCode}</strong>" ‡πÑ‡∏î‡πâ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            </Typography>
            {activityStatus.description && (
              <Paper sx={{ 
                p: 3, 
                bgcolor: 'grey.100', 
                mb: 4,
                borderRadius: 3
              }}>
                <Typography variant="body1" color="text.secondary">
                  {activityStatus.description}
                </Typography>
              </Paper>
            )}
            <Paper sx={{ 
              p: 3, 
              bgcolor: 'warning.50', 
              border: '2px solid', 
              borderColor: 'warning.200', 
              mb: 4,
              borderRadius: 3
            }}>
              <Typography variant="body1" color="warning.main" fontWeight="600">
                ‚ö†Ô∏è ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
              </Typography>
            </Paper>
            <Button
              variant="outlined"
              size="large"
              onClick={() => window.close()}
              sx={{ px: 4, py: 1.5, borderRadius: 3 }}
            >
              ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
            </Button>
          </CardContent>
        </Card>
      </Grow>
    );
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
  if (!activityStatus.userCode) {
    return (
      <Grow in={true}>
        <Card elevation={8} sx={{ borderRadius: 4, border: '2px solid', borderColor: 'warning.main' }}>
          <CardContent sx={{ textAlign: 'center', py: 8 }}>
            <PersonIcon sx={{ fontSize: 100, color: 'warning.main', mb: 3 }} />
            <Typography variant="h3" color="warning.main" gutterBottom fontWeight="bold">
              ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            </Typography>
            <Typography variant="h6" paragraph color="text.secondary">
              ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° "<strong>{activityStatus.activityCode}</strong>" ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            </Typography>
            <Paper sx={{ 
              p: 3, 
              bgcolor: 'warning.50', 
              border: '2px solid', 
              borderColor: 'warning.200', 
              mb: 4,
              borderRadius: 3
            }}>
              <Typography variant="body1" color="warning.main" fontWeight="600">
                ‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ
              </Typography>
            </Paper>
            <Button
              variant="outlined"
              size="large"
              onClick={() => window.close()}
              sx={{ px: 4, py: 1.5, borderRadius: 3 }}
            >
              ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
            </Button>
          </CardContent>
        </Card>
      </Grow>
    );
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  if (success) {
    return (
      <Fade in={true}>
        <Card elevation={12} sx={{ borderRadius: 4, border: '3px solid', borderColor: 'success.main' }}>
          <CardContent sx={{ textAlign: 'center', py: 6 }}>
            <CheckCircleIcon sx={{ fontSize: 120, color: 'success.main', mb: 3 }} />
            <Typography variant="h3" color="success.main" gutterBottom fontWeight="bold">
              ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!
            </Typography>
            <Typography variant="h6" paragraph color="text.secondary">
              ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß
            </Typography>
            <Paper sx={{ 
              p: 4, 
              bgcolor: 'success.50', 
              border: '2px solid', 
              borderColor: 'success.200', 
              mb: 4,
              borderRadius: 3
            }}>
              <Grid container spacing={2} sx={{ textAlign: 'left' }}>
                <Grid item xs={12} sm={6}>
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                    <BadgeIcon sx={{ mr: 2, color: 'success.main' }} />
                    <Box>
                      <Typography variant="caption" color="text.secondary">‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</Typography>
                      <Typography variant="body1" fontWeight="600">{activityCode}</Typography>
                    </Box>
                  </Box>
                </Grid>
                <Grid item xs={12} sm={6}>
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                    <PersonIcon sx={{ mr: 2, color: 'success.main' }} />
                    <Box>
                      <Typography variant="caption" color="text.secondary">‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</Typography>
                      <Typography variant="body1" fontWeight="600">{formData.firstName} {formData.lastName}</Typography>
                    </Box>
                  </Box>
                </Grid>
                <Grid item xs={12} sm={6}>
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                    <BadgeIcon sx={{ mr: 2, color: 'success.main' }} />
                    <Box>
                      <Typography variant="caption" color="text.secondary">‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤</Typography>
                      <Typography variant="body1" fontWeight="600">{formData.studentId}</Typography>
                    </Box>
                  </Box>
                </Grid>
                <Grid item xs={12} sm={6}>
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                    <SchoolIcon sx={{ mr: 2, color: 'success.main' }} />
                    <Box>
                      <Typography variant="caption" color="text.secondary">‡∏™‡∏≤‡∏Ç‡∏≤</Typography>
                      <Typography variant="body1" fontWeight="600">{formData.department}</Typography>
                    </Box>
                  </Box>
                </Grid>
                <Grid item xs={12}>
                  <Box sx={{ display: 'flex', alignItems: 'center' }}>
                    <AccessTimeIcon sx={{ mr: 2, color: 'success.main' }} />
                    <Box>
                      <Typography variant="caption" color="text.secondary">‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</Typography>
                      <Typography variant="body1" fontWeight="600">{new Date().toLocaleString('th-TH')}</Typography>
                    </Box>
                  </Box>
                </Grid>
              </Grid>
            </Paper>
            
            <Box sx={{ display: 'flex', justifyContent: 'center', gap: 2 }}>
              <Button
                variant="contained"
                size="large"
                onClick={() => window.close()}
                sx={{ px: 4, py: 1.5, borderRadius: 3 }}
              >
                ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
              </Button>
              <Button
                variant="outlined"
                size="large"
                onClick={() => {
                  setSuccess(false);
                  setActiveStep(0);
                  setFormData({
                    studentId: '',
                    firstName: '',
                    lastName: '',
                    department: '',
                    userCode: ''
                  });
                }}
                sx={{ px: 4, py: 1.5, borderRadius: 3 }}
              >
                ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô
              </Button>
            </Box>
          </CardContent>
        </Card>
      </Fade>
    );
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
  return (
    <Fade in={true}>
      <Card elevation={8} sx={{ borderRadius: 4 }}>
        <CardContent sx={{ p: 4 }}>
          <Box sx={{ textAlign: 'center', mb: 4 }}>
            <Typography variant="h3" gutterBottom fontWeight="bold" color="primary.main">
              ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
            </Typography>
            
            <Paper sx={{ 
              p: 3, 
              bgcolor: 'success.50', 
              border: '2px solid', 
              borderColor: 'success.200', 
              mb: 3,
              borderRadius: 3
            }}>
              <Typography variant="h5" color="success.main" fontWeight="600">
                ‚úÖ ‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°: {activityStatus.activityCode}
              </Typography>
              {activityStatus.description && (
                <Typography variant="body1" color="text.secondary" sx={{ mt: 2 }}>
                  {activityStatus.description}
                </Typography>
              )}
            </Paper>

            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ */}
            <Paper sx={{ 
              p: 3, 
              bgcolor: 'primary.50', 
              border: '2px solid', 
              borderColor: 'primary.200', 
              mb: 3,
              borderRadius: 3
            }}>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 2 }}>
                <PersonIcon color="primary" sx={{ fontSize: 32 }} />
                <Box>
                  <Typography variant="h6" color="primary.main" fontWeight="bold">
                    ‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ
                  </Typography>
                  <Typography variant="h4" color="primary.main" fontWeight="800">
                    {activityStatus.userCode}
                  </Typography>
                </Box>
              </Box>
              <Typography variant="body2" color="text.secondary" sx={{ mt: 2 }}>
                ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á "‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
              </Typography>
            </Paper>
          </Box>

          <Stepper activeStep={activeStep} sx={{ mb: 4 }}>
            {steps.map((label, index) => (
              <Step key={label}>
                <StepLabel 
                  sx={{
                    '& .MuiStepLabel-label': {
                      fontSize: '1.1rem',
                      fontWeight: activeStep === index ? 600 : 400
                    }
                  }}
                >
                  {label}
                </StepLabel>
              </Step>
            ))}
          </Stepper>

          {error && (
            <Slide direction="down" in={!!error}>
              <Alert 
                severity="error" 
                sx={{ 
                  mb: 3,
                  borderRadius: 2,
                  fontSize: '1rem'
                }}
                action={
                  forceRefreshEnabled && (
                    <Button
                      color="inherit"
                      size="small"
                      onClick={handleForceRefresh}
                      startIcon={<RefreshIcon />}
                    >
                      ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
                    </Button>
                  )
                }
              >
                {error}
                {forceRefreshEnabled && (
                  <Typography variant="caption" display="block" sx={{ mt: 1 }}>
                    üîÑ ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å Server ‡πÅ‡∏•‡πâ‡∏ß
                  </Typography>
                )}
              </Alert>
            </Slide>
          )}

          {activeStep === 0 && (
            <Grow in={true}>
              <Grid container spacing={3}>
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤"
                    value={formData.studentId}
                    onChange={handleInputChange('studentId')}
                    required
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô 6412345678"
                    helperText="‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ 10 ‡∏´‡∏•‡∏±‡∏Å ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 64-69"
                    disabled={forceRefreshEnabled}
                    inputProps={{
                      maxLength: 10,
                      pattern: '[0-9]*'
                    }}
                    InputProps={{
                      startAdornment: <BadgeIcon sx={{ mr: 1, color: 'action.active' }} />
                    }}
                    sx={{
                      '& .MuiOutlinedInput-root': {
                        borderRadius: 2,
                        '&.Mui-focused fieldset': {
                          borderWidth: 2
                        }
                      }
                    }}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    fullWidth
                    label="‡∏ä‡∏∑‡πà‡∏≠"
                    value={formData.firstName}
                    onChange={handleInputChange('firstName')}
                    required
                    placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á"
                    disabled={forceRefreshEnabled}
                    InputProps={{
                      startAdornment: <PersonIcon sx={{ mr: 1, color: 'action.active' }} />
                    }}
                    sx={{
                      '& .MuiOutlinedInput-root': {
                        borderRadius: 2,
                        '&.Mui-focused fieldset': {
                          borderWidth: 2
                        }
                      }
                    }}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    fullWidth
                    label="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
                    value={formData.lastName}
                    onChange={handleInputChange('lastName')}
                    required
                    placeholder="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏à‡∏£‡∏¥‡∏á"
                    disabled={forceRefreshEnabled}
                    InputProps={{
                      startAdornment: <PersonIcon sx={{ mr: 1, color: 'action.active' }} />
                    }}
                    sx={{
                      '& .MuiOutlinedInput-root': {
                        borderRadius: 2,
                        '&.Mui-focused fieldset': {
                          borderWidth: 2
                        }
                      }
                    }}
                  />
                </Grid>
                <Grid item xs={12}>
                  <FormControl fullWidth required disabled={departmentsLoading || forceRefreshEnabled}>
                    <InputLabel>‡∏™‡∏≤‡∏Ç‡∏≤</InputLabel>
                    <Select
                      value={formData.department}
                      label="‡∏™‡∏≤‡∏Ç‡∏≤"
                      onChange={handleSelectChange('department')}
                      sx={{
                        borderRadius: 2,
                        '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
                          borderWidth: 2
                        }
                      }}
                    >
                      {departmentsLoading ? (
                        <MenuItem disabled>
                          <CircularProgress size={20} sx={{ mr: 2 }} />
                          ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤...
                        </MenuItem>
                      ) : (
                        departments.map((dept) => (
                          <MenuItem key={dept.id} value={dept.name}>
                            <Box sx={{ display: 'flex', alignItems: 'center' }}>
                              <SchoolIcon sx={{ mr: 2, color: 'action.active' }} />
                              {dept.name}
                            </Box>
                          </MenuItem>
                        ))
                      )}
                    </Select>
                    {departmentsLoading && (
                      <Typography variant="caption" color="text.secondary" sx={{ mt: 1 }}>
                        ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏Ç‡∏≤‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...
                      </Typography>
                    )}
                  </FormControl>
                </Grid>
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
                    value={formData.userCode}
                    onChange={handleInputChange('userCode')}
                    required
                    helperText={`‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô: ${activityStatus.userCode}`}
                    placeholder="‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö"
                    disabled={forceRefreshEnabled}
                    InputProps={{
                      startAdornment: (
                        <PersonIcon sx={{ mr: 1, color: 'primary.main' }} />
                      )
                    }}
                    sx={{
                      '& .MuiOutlinedInput-root': {
                        borderRadius: 2,
                        '&.Mui-focused fieldset': {
                          borderColor: 'primary.main',
                          borderWidth: 2
                        }
                      }
                    }}
                  />
                </Grid>
                <Grid item xs={12}>
                  <Button
                    fullWidth
                    variant="contained"
                    size="large"
                    onClick={handleSubmit}
                    disabled={loading || departmentsLoading || forceRefreshEnabled}
                    sx={{ 
                      py: 2,
                      borderRadius: 3,
                      fontSize: '1.1rem',
                      fontWeight: 600,
                      boxShadow: 3,
                      '&:hover': {
                        boxShadow: 6
                      }
                    }}
                    startIcon={<LocationIcon />}
                  >
                    {forceRefreshEnabled 
                      ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà' 
                      : departmentsLoading 
                        ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...' 
                        : '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å'}
                  </Button>
                </Grid>
              </Grid>
            </Grow>
          )}

          {activeStep === 1 && (
            <Fade in={true}>
              <Box sx={{ textAlign: 'center', py: 6 }}>
                <CircularProgress size={80} thickness={4} sx={{ mb: 3 }} />
                <Typography variant="h4" sx={{ mt: 2, fontWeight: 600 }}>
                  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì...
                </Typography>
                <Typography variant="body1" color="text.secondary" sx={{ mt: 2, mb: 1 }}>
                  ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå
                </Typography>
                <Typography variant="body1" color="text.secondary" sx={{ mb: 4 }}>
                  ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ <strong>{adminSettings.allowedLocation.radius}</strong> ‡πÄ‡∏°‡∏ï‡∏£
                </Typography>
                
                <LocationChecker
                  allowedLocation={adminSettings.allowedLocation}
                  onLocationVerified={handleLocationVerified}
                  onLocationError={handleLocationError}
                />
                
                <Button
                  variant="outlined"
                  size="large"
                  onClick={() => {
                    setActiveStep(0);
                    setLoading(false);
                  }}
                  sx={{ mt: 4, px: 4, py: 1.5, borderRadius: 3 }}
                  disabled={forceRefreshEnabled}
                >
                  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </Button>
              </Box>
            </Fade>
          )}
        </CardContent>
      </Card>
    </Fade>
  );
};

export default ActivityRegistrationForm;