'use client';
import React, { useEffect, useMemo, useState } from 'react';
import {
  Box, Card, CardContent, Typography, TextField, Button, Grid, Alert, Table, TableBody,
  TableCell, TableContainer, TableHead, TableRow, Paper, Chip, Dialog, DialogTitle,
  DialogContent, DialogActions, IconButton, Tooltip, Snackbar, LinearProgress, InputAdornment,
  ButtonGroup, AppBar, Toolbar, Container, Fade, Skeleton, Checkbox, FormControl, InputLabel,
  Select, OutlinedInput, MenuItem, ListItemText, Avatar
} from '@mui/material';
import {
  Download as DownloadIcon, Refresh as RefreshIcon, Delete as DeleteIcon, Visibility as ViewIcon,
  Search as SearchIcon, Clear as ClearIcon, GetApp as GetAppIcon, Event as EventIcon,
  People as PeopleIcon, Today as TodayIcon, Analytics as AnalyticsIcon
} from '@mui/icons-material';
import type { AdminProfile, AdminDepartment } from '../../types/admin';
import {
  getAllActivityRecords,
  getActivityRecordsByDepartment,
  deleteActivityRecord,
  adjustParticipantsByActivityCode,
  type ActivityRecord
} from '../../lib/adminFirebase';

type MsgType = 'success' | 'error' | 'info' | 'warning';

interface FilterState {
  search: string;
  activities: string[];
  departments: string[];
  faculties: string[];
  dateRange: { start: Date | null; end: Date | null; };
}

interface Props {
  currentAdmin: AdminProfile;
}

const AdminAttendancePanel: React.FC<Props> = ({ currentAdmin }) => {
  const [records, setRecords] = useState<ActivityRecord[]>([]);
  const [filteredRecords, setFilteredRecords] = useState<ActivityRecord[]>([]);
  const [selected, setSelected] = useState<string[]>([]);
  const [loading, setLoading] = useState(false);
  const [progress, setProgress] = useState(0);
  const [msg, setMsg] = useState<string>('');
  const [msgType, setMsgType] = useState<MsgType>('success');
  const [snack, setSnack] = useState(false);
  const [detailOpen, setDetailOpen] = useState(false);
  const [selectedRecord, setSelectedRecord] = useState<ActivityRecord | null>(null);

  const [filters, setFilters] = useState<FilterState>({
    search: '', activities: [], departments: [], faculties: [],
    dateRange: { start: null, end: null }
  });

  const isSuperAdmin = currentAdmin.role === 'super_admin';

  const availableActivities = useMemo(
    () => [...new Set(records.map(r => r.activityCode))].sort(),
    [records]
  );
  const availableDepartments = useMemo(
    () => [...new Set(records.map(r => String(r.department || '')))].sort(),
    [records]
  );
  const availableFaculties = useMemo(
    () => [...new Set(records.map(r => String(r.faculty || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')))].sort(),
    [records]
  );

  const stats = useMemo(() => {
    const uniqueStudents = new Set(filteredRecords.map(r => r.studentId)).size;
    const uniqueActivities = new Set(filteredRecords.map(r => r.activityCode)).size;
    const today = new Date(); today.setHours(0, 0, 0, 0);
    const todayCount = filteredRecords.filter(r => {
      const rd = new Date(r.timestamp); rd.setHours(0, 0, 0, 0);
      return rd.getTime() === today.getTime();
    }).length;
    return {
      totalRecords: filteredRecords.length,
      uniqueStudents,
      uniqueActivities,
      todayRecords: todayCount
    };
  }, [filteredRecords]);

  const alert = (text: string, type: MsgType = 'success') => {
    setMsg(text); setMsgType(type); setSnack(true);
  };

  const load = async () => {
    setLoading(true);
    setProgress(20);
    try {
      const data = currentAdmin.department === 'all'
        ? await getAllActivityRecords()
        : await getActivityRecordsByDepartment(currentAdmin.department as AdminDepartment);

      setProgress(70);
      // ‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡πÅ‡∏ñ‡∏ß‡∏°‡∏µ Date ‡∏à‡∏£‡∏¥‡∏á
      const normalized = data.map(d => ({
        ...d, timestamp: d.timestamp instanceof Date ? d.timestamp : new Date(d.timestamp)
      }));
      setRecords(normalized);
      setProgress(100);
      alert(`‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${normalized.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`, 'success');
    } catch (e: any) {
      console.error(e);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', 'error');
    } finally {
      setLoading(false);
      setTimeout(() => setProgress(0), 600);
    }
  };

  useEffect(() => { load(); }, [currentAdmin.department]);

  useEffect(() => {
    let filtered = [...records];
    const s = filters.search.trim().toLowerCase();
    if (s) {
      filtered = filtered.filter(r =>
        r.activityCode.toLowerCase().includes(s) ||
        r.studentId.toLowerCase().includes(s) ||
        r.firstName.toLowerCase().includes(s) ||
        r.lastName.toLowerCase().includes(s) ||
        String(r.department || '').toLowerCase().includes(s) ||
        String(r.faculty || '').toLowerCase().includes(s)
      );
    }
    if (filters.activities.length) {
      filtered = filtered.filter(r => filters.activities.includes(r.activityCode));
    }
    if (filters.departments.length) {
      filtered = filtered.filter(r => filters.departments.includes(String(r.department || '')));
    }
    if (filters.faculties.length) {
      filtered = filtered.filter(r => filters.faculties.includes(String(r.faculty || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')));
    }
    const { start, end } = filters.dateRange;
    if (start || end) {
      filtered = filtered.filter(r => {
        const d = new Date(r.timestamp);
        if (start && end) return d >= start && d <= end;
        if (start) return d >= start;
        if (end) return d <= end;
        return true;
      });
    }
    setFilteredRecords(filtered);
  }, [records, filters]);

  const exportCSV = (selectedOnly = false) => {
    const rows = selectedOnly
      ? filteredRecords.filter(r => selected.includes(r.id))
      : filteredRecords;

    if (selectedOnly && rows.length === 0) return alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å', 'warning');

    const headers = ['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà/‡πÄ‡∏ß‡∏•‡∏≤','‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤','‡∏ä‡∏∑‡πà‡∏≠','‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•','‡∏Ñ‡∏ì‡∏∞','‡∏™‡∏≤‡∏Ç‡∏≤','‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°'];
    const csv = [
      headers.join(','),
      ...rows.map(r => [
        new Date(r.timestamp).toLocaleString('th-TH'),
        r.studentId, r.firstName, r.lastName,
        String(r.faculty || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'),
        String(r.department || ''),
        r.activityCode
      ].join(','))
    ].join('\n');

    const blob = new Blob(['\uFEFF' + csv], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = selectedOnly
      ? `selected_records_${new Date().toISOString().split('T')[0]}.csv`
      : `activity_records_${new Date().toISOString().split('T')[0]}.csv`;
    a.click();
    URL.revokeObjectURL(url);
    alert(`‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•${selectedOnly ? '‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å' : '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'} ${rows.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à üìä`, 'success');
  };

  const handleDeleteOne = async (rec: ActivityRecord) => {
    if (!isSuperAdmin) return alert('‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏•‡∏ö‡πÑ‡∏î‡πâ', 'warning');
    if (!confirm('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ?')) return;

    try {
      // ‡∏•‡∏î‡∏¢‡∏≠‡∏î‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      await adjustParticipantsByActivityCode(rec.activityCode, -1);
      // ‡∏•‡∏ö record
      await deleteActivityRecord(rec.id);
      alert('‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÅ‡∏•‡πâ‡∏ß üóëÔ∏è', 'success');
      await load();
    } catch (e: any) {
      console.error(e);
      alert(`‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${e.message || e}`, 'error');
    }
  };

  const handleDeleteSelected = async () => {
    if (!isSuperAdmin) return alert('‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏•‡∏ö‡πÑ‡∏î‡πâ', 'warning');
    if (selected.length === 0) return alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö', 'warning');
    if (!confirm(`‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏ö ${selected.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å?`)) return;

    setLoading(true);
    try {
      // ‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏≤‡∏° activityCode
      const countByCode: Record<string, number> = {};
      const chosen = records.filter(r => selected.includes(r.id));
      chosen.forEach(r => { countByCode[r.activityCode] = (countByCode[r.activityCode] || 0) + 1; });

      // ‡∏•‡∏î‡∏¢‡∏≠‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
      await Promise.all(
        Object.entries(countByCode).map(([code, cnt]) => adjustParticipantsByActivityCode(code, -cnt))
      );

      // ‡∏•‡∏ö‡∏ó‡∏µ‡∏•‡∏∞ record
      for (const r of chosen) {
        await deleteActivityRecord(r.id);
      }

      setSelected([]);
      alert(`‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ${chosen.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÅ‡∏•‡πâ‡∏ß`, 'success');
      await load();
    } catch (e: any) {
      console.error(e);
      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö: ${e.message || e}`, 'error');
    } finally {
      setLoading(false);
    }
  };

  const clearFilters = () => {
    setFilters({
      search: '', activities: [], departments: [], faculties: [],
      dateRange: { start: null, end: null }
    });
    setSelected([]);
  };

  const StatCard = ({ title, value, icon, color, subtitle }: any) => (
    <Fade in timeout={500}>
      <Card sx={{ borderRadius: 3 }}>
        <CardContent sx={{ textAlign: 'center', py: 3 }}>
          <Avatar sx={{ bgcolor: color, width: 56, height: 56, mx: 'auto', mb: 1 }}>{icon}</Avatar>
          <Typography variant="h4" sx={{ fontWeight: 800, color }}>{value}</Typography>
          <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>{title}</Typography>
          {subtitle && <Typography variant="caption" color="text.secondary">{subtitle}</Typography>}
        </CardContent>
      </Card>
    </Fade>
  );

  return (
    <Box sx={{ minHeight: '100vh', background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)' }}>
      <AppBar position="static" elevation={0} sx={{ background: 'rgba(255,255,255,.15)', backdropFilter: 'blur(20px)' }}>
        <Toolbar sx={{ py: 1 }}>
          <Avatar sx={{ bgcolor: 'rgba(255,255,255,.25)', mr: 2 }}>
            <AnalyticsIcon sx={{ color: 'white' }} />
          </Avatar>
          <Typography variant="h5" sx={{ flexGrow: 1, fontWeight: 700, color: 'white' }}>
            ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
          </Typography>
          <Chip label={currentAdmin.isActive ? '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' : '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î'} color={currentAdmin.isActive ? 'success' : 'default'} />
        </Toolbar>
      </AppBar>

      {progress > 0 && progress < 100 && (
        <LinearProgress variant="determinate" value={progress} />
      )}

      <Container maxWidth="xl" sx={{ py: 4 }}>
        {/* Stats */}
        <Grid container spacing={3} sx={{ mb: 3 }}>
          <Grid item xs={12} sm={6} md={3}>
            <StatCard title="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" value={stats.totalRecords} icon={<EventIcon />} color="#1976d2" subtitle="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°" />
          </Grid>
          <Grid item xs={12} sm={6} md={3}>
            <StatCard title="‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤" value={stats.uniqueStudents} icon={<PeopleIcon />} color="#9c27b0" subtitle="‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°" />
          </Grid>
          <Grid item xs={12} sm={6} md={3}>
            <StatCard title="‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°" value={stats.uniqueActivities} icon={<EventIcon />} color="#2e7d32" subtitle="‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" />
          </Grid>
          <Grid item xs={12} sm={6} md={3}>
            <StatCard title="‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ" value={stats.todayRecords} icon={<TodayIcon />} color="#ed6c02" subtitle="‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ" />
          </Grid>
        </Grid>

        {/* Filters + Actions */}
        <Card sx={{ mb: 3, borderRadius: 3 }}>
          <CardContent>
            <Grid container spacing={2} alignItems="center">
              <Grid item xs={12} md={4}>
                <TextField
                  fullWidth size="small" label="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"
                  value={filters.search}
                  onChange={(e) => setFilters(v => ({ ...v, search: e.target.value }))}
                  InputProps={{
                    startAdornment: (<InputAdornment position="start"><SearchIcon /></InputAdornment>),
                    endAdornment: filters.search && (
                      <InputAdornment position="end">
                        <IconButton size="small" onClick={() => setFilters(v => ({ ...v, search: '' }))}><ClearIcon /></IconButton>
                      </InputAdornment>
                    )
                  }}
                />
              </Grid>

              <Grid item xs={12} md={3}>
                <FormControl fullWidth size="small">
                  <InputLabel>‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</InputLabel>
                  <Select
                    multiple value={filters.activities}
                    onChange={(e) => setFilters(v => ({ ...v, activities: (e.target.value as string[]) }))}
                    input={<OutlinedInput label="‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°" />}
                    renderValue={(selected) => <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: .5 }}>
                      {selected.map((v) => <Chip key={v} size="small" label={v} />)}
                    </Box>}
                  >
                    {availableActivities.map((a) => (
                      <MenuItem key={a} value={a}>
                        <Checkbox checked={filters.activities.includes(a)} />
                        <ListItemText primary={a} />
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>

              <Grid item xs={12} md={3}>
                <FormControl fullWidth size="small">
                  <InputLabel>‡∏™‡∏≤‡∏Ç‡∏≤</InputLabel>
                  <Select
                    multiple value={filters.departments}
                    onChange={(e) => setFilters(v => ({ ...v, departments: (e.target.value as string[]) }))}
                    input={<OutlinedInput label="‡∏™‡∏≤‡∏Ç‡∏≤" />}
                    renderValue={(selected) => <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: .5 }}>
                      {selected.map((v) => <Chip key={v} size="small" label={v} />)}
                    </Box>}
                  >
                    {availableDepartments.map((d) => (
                      <MenuItem key={d} value={d}>
                        <Checkbox checked={filters.departments.includes(d)} />
                        <ListItemText primary={d} />
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>

              <Grid item xs={12} md={2} sx={{ display: 'flex', gap: 1, justifyContent: { xs: 'stretch', md: 'flex-end' } }}>
                <Button variant="outlined" onClick={clearFilters} startIcon={<ClearIcon />}>‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á</Button>
                <ButtonGroup variant="contained">
                  <Button onClick={load} disabled={loading} startIcon={<RefreshIcon />}>‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä</Button>
                  <Button color="success" onClick={() => exportCSV(false)} startIcon={<DownloadIcon />}>‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å</Button>
                </ButtonGroup>
              </Grid>
            </Grid>
          </CardContent>
        </Card>

        {/* Table */}
        <Card sx={{ borderRadius: 3 }}>
          <CardContent>
            <Box sx={{ display: 'flex', alignItems: 'center', mb: 2, gap: 2 }}>
              <Avatar sx={{ bgcolor: 'primary.main' }}><EventIcon /></Avatar>
              <Typography variant="h6" fontWeight="bold">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô</Typography>
              <Chip label={`${filteredRecords.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`} color="primary" />
              {selected.length > 0 && <Chip label={`‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ${selected.length}`} color="secondary" />}
              <Box sx={{ flex: 1 }} />
              <ButtonGroup variant="contained">
                <Button color="info" onClick={() => exportCSV(true)} startIcon={<GetAppIcon />} disabled={selected.length === 0}>
                  ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                </Button>
                <Button color="error" onClick={handleDeleteSelected} startIcon={<DeleteIcon />} disabled={!isSuperAdmin || selected.length === 0}>
                  ‡∏•‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                </Button>
              </ButtonGroup>
            </Box>

            <TableContainer component={Paper} sx={{ maxHeight: 600, borderRadius: 2 }}>
              <Table stickyHeader>
                <TableHead>
                  <TableRow>
                    <TableCell>
                      <Checkbox
                        indeterminate={selected.length > 0 && selected.length < filteredRecords.length}
                        checked={filteredRecords.length > 0 && selected.length === filteredRecords.length}
                        onChange={(e) => setSelected(e.target.checked ? filteredRecords.map(r => r.id) : [])}
                      />
                    </TableCell>
                    <TableCell>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà/‡πÄ‡∏ß‡∏•‡∏≤</TableCell>
                    <TableCell>‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤</TableCell>
                    <TableCell>‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</TableCell>
                    <TableCell>‡∏Ñ‡∏ì‡∏∞</TableCell>
                    <TableCell>‡∏™‡∏≤‡∏Ç‡∏≤</TableCell>
                    <TableCell>‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</TableCell>
                    <TableCell>‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {loading ? (
                    Array.from({ length: 5 }).map((_, i) => (
                      <TableRow key={i}>{Array.from({ length: 8 }).map((_, j) => <TableCell key={j}><Skeleton height={40} /></TableCell>)}</TableRow>
                    ))
                  ) : (
                    filteredRecords.map((r) => (
                      <TableRow key={r.id} hover selected={selected.includes(r.id)}>
                        <TableCell>
                          <Checkbox
                            checked={selected.includes(r.id)}
                            onChange={() =>
                              setSelected(prev => prev.includes(r.id) ? prev.filter(id => id !== r.id) : [...prev, r.id])
                            }
                          />
                        </TableCell>
                        <TableCell>
                          <Typography variant="body2" fontWeight={600}>{new Date(r.timestamp).toLocaleDateString('th-TH')}</Typography>
                          <Typography variant="caption" color="text.secondary">{new Date(r.timestamp).toLocaleTimeString('th-TH')}</Typography>
                        </TableCell>
                        <TableCell><Typography fontWeight={700} color="primary">{r.studentId}</Typography></TableCell>
                        <TableCell>{r.firstName} {r.lastName}</TableCell>
                        <TableCell><Chip size="small" label={String(r.faculty || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')} variant="outlined" color="info" /></TableCell>
                        <TableCell><Chip size="small" label={String(r.department || '')} variant="outlined" color="secondary" /></TableCell>
                        <TableCell><Chip size="small" color="primary" label={r.activityCode} /></TableCell>
                        <TableCell>
                          <Tooltip title="‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î">
                            <IconButton color="info" size="small" onClick={() => { setSelectedRecord(r); setDetailOpen(true); }}>
                              <ViewIcon />
                            </IconButton>
                          </Tooltip>
                          <Tooltip title={isSuperAdmin ? '‡∏•‡∏ö' : '‡∏•‡∏ö (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Super Admin)'}>
                            <span>
                              <IconButton color="error" size="small" disabled={!isSuperAdmin} onClick={() => handleDeleteOne(r)}>
                                <DeleteIcon />
                              </IconButton>
                            </span>
                          </Tooltip>
                        </TableCell>
                      </TableRow>
                    ))
                  )}
                </TableBody>
              </Table>
            </TableContainer>
          </CardContent>
        </Card>
      </Container>

      {/* Detail Dialog */}
      <Dialog open={detailOpen} onClose={() => setDetailOpen(false)} maxWidth="md" fullWidth>
        {selectedRecord && (
          <>
            <DialogTitle>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô</DialogTitle>
            <DialogContent>
              <Grid container spacing={2} sx={{ mt: .5 }}>
                <Grid item xs={12} sm={6}><Typography variant="body2" color="text.secondary">‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤</Typography><Typography variant="h6">{selectedRecord.studentId}</Typography></Grid>
                <Grid item xs={12} sm={6}><Typography variant="body2" color="text.secondary">‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</Typography><Chip color="primary" label={selectedRecord.activityCode} /></Grid>
                <Grid item xs={12}><Typography variant="body2" color="text.secondary">‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</Typography><Typography variant="h6">{selectedRecord.firstName} {selectedRecord.lastName}</Typography></Grid>
                <Grid item xs={12} sm={6}><Typography variant="body2" color="text.secondary">‡∏Ñ‡∏ì‡∏∞</Typography><Typography>{String(selectedRecord.faculty || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}</Typography></Grid>
                <Grid item xs={12} sm={6}><Typography variant="body2" color="text.secondary">‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤</Typography><Typography>{String(selectedRecord.department || '')}</Typography></Grid>
                <Grid item xs={12} sm={6}><Typography variant="body2" color="text.secondary">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</Typography><Typography>{new Date(selectedRecord.timestamp).toLocaleDateString('th-TH')}</Typography></Grid>
                <Grid item xs={12} sm={6}><Typography variant="body2" color="text.secondary">‡πÄ‡∏ß‡∏•‡∏≤</Typography><Typography>{new Date(selectedRecord.timestamp).toLocaleTimeString('th-TH')}</Typography></Grid>
              </Grid>
            </DialogContent>
            <DialogActions>
              <Button onClick={() => setDetailOpen(false)}>‡∏õ‡∏¥‡∏î</Button>
              <Button color="error" variant="contained" startIcon={<DeleteIcon />} disabled={!isSuperAdmin} onClick={() => { setDetailOpen(false); handleDeleteOne(selectedRecord); }}>
                ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
              </Button>
            </DialogActions>
          </>
        )}
      </Dialog>

      <Snackbar open={snack} autoHideDuration={4000} onClose={() => setSnack(false)} anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}>
        <Alert severity={msgType} variant="filled" onClose={() => setSnack(false)}>{msg}</Alert>
      </Snackbar>
    </Box>
  );
};

export default AdminAttendancePanel;
